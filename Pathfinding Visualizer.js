let canvas
let ctx
let disableButton = false;
let finishTransition = false;
let running = false;
let parentChild = {};
let incr = 1;
let boundX = 0;     // To prevent checking and unchecking a wall (flickering) if right click held down on same rect
let boundY = 0;
let dropStartNode = false;
let dropFinishNode = false;
let visitedS = false;
let visitedF = false;
let noNeedFillRect;

let startImg = new Image();
startImg.src = "https://cdn4.iconfinder.com/data/icons/geomicons/32/672374-chevron-right-512.png";
let clickedStartImg = new Image();
clickedStartImg.src = "https://lh3.googleusercontent.com/proxy/m3pULoDe6BtzhwUrhXQ8b-a5jyaRCkTyt1GtT_LZcrFdSCHsmteYOPDe_RTjPTUkscISJ1OTeg0QaiBSU2qciDrRxjm35A0qA72T";

let finishImg = new Image();
finishImg.src = "https://cdn2.iconfinder.com/data/icons/font-awesome/1792/dot-circle-o-512.png";
let clickedFinishImg = new Image();
clickedFinishImg.src = "https://iconsetc.com/icons-watermarks/simple-light-gray/bfa/bfa_dot-circle-o/bfa_dot-circle-o_simple-light-gray_512x512.png";

let width = 1515;
let height = 700;

let rectX = 30;
let rectY = 30;

let gridX = 50;
let gridY = 21;

let startNode = [10, 10];
let finishNode = [10, 39];

let grid = [];



for (let y = 0; y < gridY; y++) {
    grid[y] = [];

    for (let x = 0; x < gridX; x++) {
        grid[y][x] = {x: x * (rectX + 0.022), y: y * (rectY + 0.022), state: 'e'};
    }
}

grid[startNode[0]][startNode[1]].state = 's';
grid[finishNode[0]][finishNode[1]].state = 'f';



function arrayEquals(a, b) {
    return Array.isArray(a) && Array.isArray(b) & a.length === b.length && a.every((val, index) => val === b[index]);
}



  function inArray(a, b) {
    for (let i = 0; i < b.length; i ++) {

        if (arrayEquals(a, b[i])) {
            return true;
        }
    }

    return false;
}



function generateMaze() {
    if (disableButton == true) {
        return null;
    }

    startNode = [1, 1];
    finishNode = [19, 48];
    
    let maze = [[[0.0, 0.0, 'w'], [30.022, 0.0, 'w'], [60.044, 0.0, 'w'], [90.066, 0.0, 'w'], [120.088, 0.0, 'w'], [150.10999999999999, 0.0, 'w'], [180.132, 0.0, 'w'], [210.154, 0.0, 'w'], [240.176, 0.0, 'w'], [270.198, 0.0, 'w'], [300.21999999999997, 0.0, 'w'], [330.24199999999996, 0.0, 'w'], [360.264, 0.0, 'w'], [390.286, 0.0, 'w'], [420.308, 0.0, 'w'], [450.33, 0.0, 'w'], [480.352, 0.0, 'w'], [510.37399999999997, 0.0, 'w'], [540.396, 0.0, 'w'], [570.418, 0.0, 'w'], [600.4399999999999, 0.0, 'w'], [630.462, 0.0, 'w'], [660.4839999999999, 0.0, 'w'], [690.506, 0.0, 'w'], [720.528, 0.0, 'w'], [750.55, 0.0, 'w'], [780.572, 0.0, 'w'], [810.5939999999999, 0.0, 'w'], [840.616, 0.0, 'w'], [870.6379999999999, 0.0, 'w'], [900.66, 0.0, 'w'], [930.6819999999999, 0.0, 'w'], [960.704, 0.0, 'w'], [990.726, 0.0, 'w'], [1020.7479999999999, 0.0, 'w'], [1050.77, 0.0, 'w'], [1080.792, 0.0, 'w'], [1110.8139999999999, 0.0, 
        'w'], [1140.836, 0.0, 'w'], [1170.858, 0.0, 'w'], [1200.8799999999999, 0.0, 'w'], [1230.902, 0.0, 'w'], [1260.924, 0.0, 'w'], [1290.946, 0.0, 'w'], [1320.9679999999998, 0.0, 'w'], [1350.99, 0.0, 'w'], [1381.012, 0.0, 'w'], [1411.0339999999999, 0.0, 'w'], [1441.056, 0.0, 'w'], [1471.078, 0.0, 'w']], [[0.0, 30.022, 'w'], [30.022, 30.022, 's'], [60.044, 30.022, 'e'], [90.066, 30.022, 'e'], [120.088, 30.022, 'e'], [150.10999999999999, 30.022, 'e'], [180.132, 30.022, 'w'], [210.154, 30.022, 'e'], [240.176, 30.022, 'e'], [270.198, 30.022, 'e'], [300.21999999999997, 30.022, 'e'], [330.24199999999996, 30.022, 'e'], [360.264, 30.022, 'e'], [390.286, 30.022, 'e'], [420.308, 30.022, 'e'], [450.33, 30.022, 'e'], [480.352, 30.022, 'e'], [510.37399999999997, 30.022, 'e'], [540.396, 30.022, 'e'], [570.418, 30.022, 'e'], [600.4399999999999, 30.022, 'e'], [630.462, 30.022, 'e'], [660.4839999999999, 30.022, 'e'], [690.506, 30.022, 'e'], [720.528, 30.022, 'e'], [750.55, 30.022, 'e'], [780.572, 30.022, 'e'], [810.5939999999999, 30.022, 'w'], [840.616, 30.022, 'e'], [870.6379999999999, 30.022, 'e'], [900.66, 30.022, 'e'], [930.6819999999999, 30.022, 'e'], [960.704, 30.022, 'e'], [990.726, 30.022, 'e'], [1020.7479999999999, 30.022, 'e'], [1050.77, 30.022, 'e'], [1080.792, 30.022, 'e'], [1110.8139999999999, 30.022, 'e'], [1140.836, 30.022, 'e'], [1170.858, 30.022, 'e'], [1200.8799999999999, 30.022, 'e'], [1230.902, 30.022, 'e'], [1260.924, 30.022, 'e'], [1290.946, 30.022, 'e'], [1320.9679999999998, 30.022, 'e'], [1350.99, 30.022, 'e'], [1381.012, 30.022, 'e'], [1411.0339999999999, 30.022, 'e'], [1441.056, 30.022, 'e'], [1471.078, 30.022, 'w']], [[0.0, 60.044, 'w'], [30.022, 60.044, 'w'], [60.044, 60.044, 'w'], [90.066, 60.044, 'e'], [120.088, 60.044, 'w'], [150.10999999999999, 60.044, 'e'], [180.132, 60.044, 'w'], [210.154, 60.044, 'e'], [240.176, 60.044, 'w'], [270.198, 60.044, 'w'], [300.21999999999997, 60.044, 'w'], [330.24199999999996, 60.044, 'e'], [360.264, 60.044, 'e'], [390.286, 60.044, 'e'], [420.308, 60.044, 'w'], [450.33, 60.044, 'w'], [480.352, 60.044, 'w'], [510.37399999999997, 60.044, 'w'], [540.396, 60.044, 'w'], [570.418, 60.044, 'w'], [600.4399999999999, 60.044, 'w'], [630.462, 60.044, 'w'], [660.4839999999999, 60.044, 'w'], [690.506, 60.044, 'e'], [720.528, 60.044, 'e'], [750.55, 60.044, 'e'], [780.572, 60.044, 'e'], [810.5939999999999, 60.044, 'w'], [840.616, 60.044, 'e'], [870.6379999999999, 60.044, 'e'], [900.66, 60.044, 'e'], [930.6819999999999, 60.044, 'e'], [960.704, 60.044, 'e'], [990.726, 60.044, 'w'], [1020.7479999999999, 60.044, 'w'], [1050.77, 60.044, 'w'], [1080.792, 60.044, 'w'], [1110.8139999999999, 60.044, 'w'], [1140.836, 60.044, 'w'], [1170.858, 60.044, 'w'], [1200.8799999999999, 60.044, 'w'], [1230.902, 60.044, 'w'], [1260.924, 60.044, 'w'], [1290.946, 60.044, 'w'], [1320.9679999999998, 60.044, 'w'], [1350.99, 60.044, 'w'], [1381.012, 60.044, 'w'], [1411.0339999999999, 60.044, 'w'], [1441.056, 60.044, 'e'], [1471.078, 60.044, 'w']], [[0.0, 90.066, 'w'], [30.022, 90.066, 'e'], [60.044, 90.066, 'e'], [90.066, 90.066, 'e'], [120.088, 90.066, 'w'], [150.10999999999999, 90.066, 'e'], [180.132, 90.066, 'w'], [210.154, 90.066, 'e'], [240.176, 90.066, 'e'], [270.198, 90.066, 'e'], [300.21999999999997, 90.066, 'w'], [330.24199999999996, 90.066, 'w'], [360.264, 90.066, 'w'], [390.286, 90.066, 'e'], [420.308, 90.066, 'w'], [450.33, 90.066, 'e'], [480.352, 90.066, 'e'], [510.37399999999997, 90.066, 'e'], [540.396, 90.066, 'e'], [570.418, 90.066, 'e'], [600.4399999999999, 90.066, 'e'], [630.462, 90.066, 'e'], [660.4839999999999, 90.066, 'w'], [690.506, 90.066, 'e'], [720.528, 90.066, 'w'], [750.55, 90.066, 'w'], [780.572, 90.066, 'w'], [810.5939999999999, 90.066, 'w'], [840.616, 90.066, 'e'], [870.6379999999999, 90.066, 'w'], [900.66, 90.066, 'w'], [930.6819999999999, 90.066, 'w'], [960.704, 90.066, 'w'], [990.726, 90.066, 'w'], [1020.7479999999999, 90.066, 'e'], [1050.77, 90.066, 'e'], [1080.792, 90.066, 'e'], [1110.8139999999999, 90.066, 'e'], [1140.836, 90.066, 'e'], [1170.858, 90.066, 'e'], [1200.8799999999999, 90.066, 'e'], [1230.902, 90.066, 'w'], [1260.924, 90.066, 'e'], [1290.946, 90.066, 'e'], [1320.9679999999998, 90.066, 'e'], [1350.99, 90.066, 'e'], [1381.012, 90.066, 'e'], [1411.0339999999999, 90.066, 'e'], [1441.056, 90.066, 'e'], [1471.078, 90.066, 'w']], [[0.0, 120.088, 'w'], [30.022, 120.088, 'e'], [60.044, 120.088, 'w'], [90.066, 120.088, 'w'], [120.088, 120.088, 'w'], [150.10999999999999, 120.088, 'e'], [180.132, 120.088, 'w'], [210.154, 120.088, 'w'], [240.176, 120.088, 'w'], [270.198, 120.088, 'e'], [300.21999999999997, 120.088, 'e'], [330.24199999999996, 120.088, 'e'], [360.264, 120.088, 'w'], [390.286, 120.088, 'e'], [420.308, 120.088, 'w'], [450.33, 120.088, 'w'], [480.352, 120.088, 'w'], [510.37399999999997, 120.088, 'w'], [540.396, 120.088, 'w'], [570.418, 120.088, 'e'], 
        [600.4399999999999, 120.088, 'w'], [630.462, 120.088, 'e'], [660.4839999999999, 120.088, 'w'], [690.506, 120.088, 'e'], [720.528, 120.088, 'e'], [750.55, 120.088, 'e'], [780.572, 120.088, 'e'], [810.5939999999999, 120.088, 'e'], [840.616, 120.088, 'e'], [870.6379999999999, 120.088, 'e'], [900.66, 120.088, 'e'], [930.6819999999999, 120.088, 'e'], [960.704, 120.088, 'e'], [990.726, 120.088, 'e'], [1020.7479999999999, 120.088, 'e'], [1050.77, 120.088, 'w'], [1080.792, 120.088, 'w'], [1110.8139999999999, 120.088, 'w'], [1140.836, 120.088, 'w'], [1170.858, 120.088, 'w'], [1200.8799999999999, 120.088, 'e'], [1230.902, 120.088, 'w'], [1260.924, 120.088, 'w'], [1290.946, 120.088, 'w'], [1320.9679999999998, 120.088, 'w'], [1350.99, 120.088, 'e'], [1381.012, 120.088, 'w'], [1411.0339999999999, 120.088, 'w'], [1441.056, 120.088, 'e'], [1471.078, 120.088, 'w']], [[0.0, 150.10999999999999, 'w'], [30.022, 
        150.10999999999999, 'e'], [60.044, 150.10999999999999, 'w'], [90.066, 150.10999999999999, 'e'], [120.088, 150.10999999999999, 'w'], [150.10999999999999, 150.10999999999999, 'e'], [180.132, 150.10999999999999, 'w'], [210.154, 150.10999999999999, 'e'], [240.176, 150.10999999999999, 'w'], [270.198, 150.10999999999999, 'w'], [300.21999999999997, 150.10999999999999, 'w'], [330.24199999999996, 150.10999999999999, 'e'], [360.264, 150.10999999999999, 'w'], [390.286, 150.10999999999999, 'w'], [420.308, 150.10999999999999, 'w'], [450.33, 150.10999999999999, 'e'], [480.352, 150.10999999999999, 'e'], [510.37399999999997, 150.10999999999999, 'e'], [540.396, 150.10999999999999, 'w'], [570.418, 150.10999999999999, 'e'], [600.4399999999999, 150.10999999999999, 'w'], [630.462, 150.10999999999999, 'e'], [660.4839999999999, 150.10999999999999, 'w'], [690.506, 150.10999999999999, 'w'], [720.528, 150.10999999999999, 'w'], [750.55, 150.10999999999999, 'w'], [780.572, 150.10999999999999, 'e'], [810.5939999999999, 150.10999999999999, 'w'], [840.616, 150.10999999999999, 'w'], [870.6379999999999, 150.10999999999999, 'w'], [900.66, 150.10999999999999, 'w'], [930.6819999999999, 150.10999999999999, 'w'], [960.704, 150.10999999999999, 'w'], [990.726, 150.10999999999999, 'w'], 
        [1020.7479999999999, 150.10999999999999, 'w'], [1050.77, 150.10999999999999, 'w'], [1080.792, 150.10999999999999, 'e'], [1110.8139999999999, 150.10999999999999, 'e'], [1140.836, 150.10999999999999, 'e'], [1170.858, 150.10999999999999, 'w'], [1200.8799999999999, 150.10999999999999, 'e'], [1230.902, 150.10999999999999, 'e'], [1260.924, 150.10999999999999, 'e'], 
        [1290.946, 150.10999999999999, 'e'], [1320.9679999999998, 150.10999999999999, 'w'], [1350.99, 150.10999999999999, 'e'], [1381.012, 150.10999999999999, 'e'], [1411.0339999999999, 150.10999999999999, 'w'], [1441.056, 150.10999999999999, 'e'], [1471.078, 150.10999999999999, 'w']], [[0.0, 180.132, 'w'], [30.022, 180.132, 'e'], [60.044, 180.132, 'w'], [90.066, 180.132, 'e'], [120.088, 180.132, 'e'], [150.10999999999999, 180.132, 'e'], [180.132, 180.132, 'e'], [210.154, 180.132, 'e'], [240.176, 180.132, 'w'], [270.198, 180.132, 'e'], [300.21999999999997, 180.132, 'w'], [330.24199999999996, 180.132, 'e'], [360.264, 180.132, 'e'], [390.286, 180.132, 'e'], [420.308, 180.132, 'e'], [450.33, 180.132, 'e'], [480.352, 180.132, 
        'e'], [510.37399999999997, 180.132, 'e'], [540.396, 180.132, 'w'], [570.418, 180.132, 'e'], [600.4399999999999, 180.132, 'w'], [630.462, 180.132, 'e'], [660.4839999999999, 180.132, 
        'e'], [690.506, 180.132, 'e'], [720.528, 180.132, 'e'], [750.55, 180.132, 'w'], [780.572, 180.132, 'e'], [810.5939999999999, 180.132, 'w'], [840.616, 180.132, 'e'], [870.6379999999999, 180.132, 'e'], [900.66, 180.132, 'e'], [930.6819999999999, 180.132, 'e'], [960.704, 180.132, 'e'], [990.726, 180.132, 'w'], [1020.7479999999999, 180.132, 'e'], [1050.77, 180.132, 'e'], [1080.792, 180.132, 'e'], [1110.8139999999999, 180.132, 'w'], [1140.836, 180.132, 'e'], [1170.858, 180.132, 'e'], [1200.8799999999999, 180.132, 'e'], [1230.902, 180.132, 'w'], [1260.924, 180.132, 'e'], [1290.946, 180.132, 'w'], [1320.9679999999998, 180.132, 'w'], [1350.99, 180.132, 'w'], [1381.012, 180.132, 'e'], [1411.0339999999999, 180.132, 'w'], [1441.056, 180.132, 'w'], [1471.078, 180.132, 'w']], [[0.0, 210.154, 'w'], [30.022, 210.154, 'e'], [60.044, 210.154, 'w'], [90.066, 210.154, 'w'], [120.088, 210.154, 'w'], [150.10999999999999, 210.154, 'w'], [180.132, 210.154, 'w'], [210.154, 210.154, 'e'], [240.176, 210.154, 'e'], [270.198, 210.154, 'e'], [300.21999999999997, 210.154, 'w'], [330.24199999999996, 
        210.154, 'w'], [360.264, 210.154, 'w'], [390.286, 210.154, 'w'], [420.308, 210.154, 'w'], [450.33, 210.154, 'w'], [480.352, 210.154, 'w'], [510.37399999999997, 210.154, 'e'], [540.396, 210.154, 'w'], [570.418, 210.154, 'e'], [600.4399999999999, 210.154, 'w'], [630.462, 210.154, 'e'], [660.4839999999999, 210.154, 'w'], [690.506, 210.154, 'w'], [720.528, 210.154, 'w'], [750.55, 210.154, 'w'], [780.572, 210.154, 'e'], [810.5939999999999, 210.154, 'w'], [840.616, 210.154, 'e'], [870.6379999999999, 210.154, 'w'], [900.66, 210.154, 'w'], [930.6819999999999, 210.154, 'w'], [960.704, 210.154, 'e'], [990.726, 210.154, 'w'], [1020.7479999999999, 210.154, 'e'], [1050.77, 210.154, 'e'], [1080.792, 210.154, 'e'], [1110.8139999999999, 210.154, 'w'], [1140.836, 210.154, 'e'], [1170.858, 210.154, 'w'], [1200.8799999999999, 210.154, 'w'], [1230.902, 210.154, 'w'], [1260.924, 210.154, 'e'], [1290.946, 210.154, 'w'], [1320.9679999999998, 210.154, 'e'], [1350.99, 210.154, 'e'], [1381.012, 210.154, 'e'], [1411.0339999999999, 210.154, 'e'], [1441.056, 210.154, 'e'], [1471.078, 210.154, 'w']], [[0.0, 240.176, 'w'], [30.022, 240.176, 'e'], [60.044, 240.176, 'e'], [90.066, 240.176, 'e'], [120.088, 240.176, 'w'], [150.10999999999999, 240.176, 'e'], [180.132, 240.176, 'w'], [210.154, 240.176, 'w'], [240.176, 240.176, 'w'], [270.198, 240.176, 'e'], [300.21999999999997, 240.176, 'w'], [330.24199999999996, 240.176, 'e'], [360.264, 240.176, 'e'], [390.286, 240.176, 'e'], [420.308, 240.176, 'e'], [450.33, 240.176, 'e'], [480.352, 240.176, 'w'], [510.37399999999997, 240.176, 'e'], [540.396, 240.176, 'w'], [570.418, 240.176, 'e'], [600.4399999999999, 240.176, 'w'], [630.462, 240.176, 'e'], [660.4839999999999, 240.176, 'e'], [690.506, 240.176, 'e'], [720.528, 240.176, 'e'], [750.55, 240.176, 'w'], [780.572, 240.176, 'e'], [810.5939999999999, 240.176, 'e'], [840.616, 240.176, 'e'], [870.6379999999999, 240.176, 'w'], [900.66, 240.176, 'e'], [930.6819999999999, 240.176, 'w'], [960.704, 240.176, 'e'], [990.726, 240.176, 'e'], [1020.7479999999999, 240.176, 'e'], [1050.77, 240.176, 'w'], [1080.792, 240.176, 'w'], [1110.8139999999999, 240.176, 'w'], [1140.836, 240.176, 'e'], 
        [1170.858, 240.176, 'e'], [1200.8799999999999, 240.176, 'e'], [1230.902, 240.176, 'w'], [1260.924, 240.176, 'e'], [1290.946, 240.176, 'w'], [1320.9679999999998, 240.176, 'w'], [1350.99, 240.176, 'w'], [1381.012, 240.176, 'w'], [1411.0339999999999, 240.176, 'w'], [1441.056, 240.176, 'e'], [1471.078, 240.176, 'w']], [[0.0, 270.198, 'w'], [30.022, 270.198, 'e'], 
        [60.044, 270.198, 'w'], [90.066, 270.198, 'e'], [120.088, 270.198, 'w'], [150.10999999999999, 270.198, 'e'], [180.132, 270.198, 'e'], [210.154, 270.198, 'e'], [240.176, 270.198, 'e'], [270.198, 270.198, 'e'], [300.21999999999997, 270.198, 'w'], [330.24199999999996, 270.198, 'e'], [360.264, 270.198, 'e'], [390.286, 270.198, 'e'], [420.308, 270.198, 'w'], [450.33, 270.198, 'w'], [480.352, 270.198, 'w'], [510.37399999999997, 270.198, 'e'], [540.396, 270.198, 'w'], [570.418, 270.198, 'e'], [600.4399999999999, 270.198, 'w'], [630.462, 270.198, 'e'], [660.4839999999999, 270.198, 'w'], [690.506, 270.198, 'e'], [720.528, 270.198, 'e'], [750.55, 270.198, 'w'], [780.572, 270.198, 'w'], [810.5939999999999, 270.198, 'w'], [840.616, 270.198, 'w'], [870.6379999999999, 270.198, 'w'], [900.66, 270.198, 'e'], [930.6819999999999, 270.198, 'w'], [960.704, 270.198, 'w'], [990.726, 270.198, 'w'], [1020.7479999999999, 270.198, 'w'], [1050.77, 270.198, 'w'], [1080.792, 270.198, 'e'], [1110.8139999999999, 270.198, 'e'], [1140.836, 270.198, 'e'], [1170.858, 270.198, 'e'], [1200.8799999999999, 270.198, 'e'], [1230.902, 270.198, 'w'], [1260.924, 270.198, 'e'], [1290.946, 270.198, 'e'], [1320.9679999999998, 270.198, 'e'], [1350.99, 270.198, 'e'], [1381.012, 270.198, 'e'], [1411.0339999999999, 270.198, 'w'], [1441.056, 270.198, 'e'], [1471.078, 270.198, 'w']], [[0.0, 300.21999999999997, 'w'], [30.022, 300.21999999999997, 'e'], [60.044, 300.21999999999997, 'w'], [90.066, 300.21999999999997, 'e'], [120.088, 300.21999999999997, 'w'], [150.10999999999999, 300.21999999999997, 'w'], [180.132, 300.21999999999997, 'w'], [210.154, 300.21999999999997, 'e'], [240.176, 300.21999999999997, 'w'], [270.198, 300.21999999999997, 'w'], [300.21999999999997, 300.21999999999997, 'w'], [330.24199999999996, 300.21999999999997, 'w'], [360.264, 300.21999999999997, 'w'], [390.286, 300.21999999999997, 'e'], [420.308, 300.21999999999997, 'w'], [450.33, 300.21999999999997, 'e'], [480.352, 300.21999999999997, 'e'], [510.37399999999997, 300.21999999999997, 'e'], [540.396, 300.21999999999997, 'w'], [570.418, 300.21999999999997, 'e'], [600.4399999999999, 300.21999999999997, 'w'], [630.462, 300.21999999999997, 'e'], [660.4839999999999, 300.21999999999997, 'w'], [690.506, 300.21999999999997, 'e'], [720.528, 300.21999999999997, 'e'], [750.55, 300.21999999999997, 'e'], [780.572, 300.21999999999997, 'e'], [810.5939999999999, 300.21999999999997, 'e'], [840.616, 300.21999999999997, 'e'], [870.6379999999999, 300.21999999999997, 'e'], [900.66, 300.21999999999997, 'e'], [930.6819999999999, 300.21999999999997, 'w'], [960.704, 300.21999999999997, 'e'], [990.726, 300.21999999999997, 'e'], [1020.7479999999999, 300.21999999999997, 'e'], [1050.77, 300.21999999999997, 'e'], [1080.792, 300.21999999999997, 'e'], [1110.8139999999999, 300.21999999999997, 'e'], [1140.836, 300.21999999999997, 'e'], [1170.858, 300.21999999999997, 'e'], [1200.8799999999999, 300.21999999999997, 'w'], [1230.902, 300.21999999999997, 'w'], [1260.924, 300.21999999999997, 'w'], [1290.946, 300.21999999999997, 'w'], [1320.9679999999998, 300.21999999999997, 'w'], [1350.99, 300.21999999999997, 'w'], [1381.012, 300.21999999999997, 'w'], [1411.0339999999999, 300.21999999999997, 'w'], [1441.056, 300.21999999999997, 'e'], [1471.078, 300.21999999999997, 'w']], [[0.0, 330.24199999999996, 'w'], [30.022, 330.24199999999996, 'e'], [60.044, 330.24199999999996, 'w'], [90.066, 330.24199999999996, 'e'], [120.088, 330.24199999999996, 'e'], [150.10999999999999, 330.24199999999996, 'e'], [180.132, 330.24199999999996, 'w'], [210.154, 330.24199999999996, 'e'], [240.176, 330.24199999999996, 'e'], [270.198, 330.24199999999996, 'e'], [300.21999999999997, 330.24199999999996, 'w'], [330.24199999999996, 330.24199999999996, 'e'], [360.264, 330.24199999999996, 'e'], [390.286, 330.24199999999996, 'e'], [420.308, 330.24199999999996, 'w'], [450.33, 330.24199999999996, 'e'], [480.352, 330.24199999999996, 'w'], [510.37399999999997, 330.24199999999996, 'w'], [540.396, 330.24199999999996, 'w'], [570.418, 330.24199999999996, 'e'], [600.4399999999999, 330.24199999999996, 'w'], [630.462, 330.24199999999996, 'w'], [660.4839999999999, 
        330.24199999999996, 'w'], [690.506, 330.24199999999996, 'w'], [720.528, 330.24199999999996, 'e'], [750.55, 330.24199999999996, 'w'], [780.572, 330.24199999999996, 'w'], [810.5939999999999, 330.24199999999996, 'w'], [840.616, 330.24199999999996, 'e'], [870.6379999999999, 330.24199999999996, 'w'], [900.66, 330.24199999999996, 'w'], [930.6819999999999, 330.24199999999996, 'w'], [960.704, 330.24199999999996, 'e'], [990.726, 330.24199999999996, 'e'], [1020.7479999999999, 330.24199999999996, 'w'], [1050.77, 330.24199999999996, 'w'], [1080.792, 330.24199999999996, 'w'], [1110.8139999999999, 330.24199999999996, 'w'], [1140.836, 330.24199999999996, 'w'], [1170.858, 330.24199999999996, 'w'], [1200.8799999999999, 330.24199999999996, 'w'], [1230.902, 330.24199999999996, 'e'], [1260.924, 330.24199999999996, 'e'], [1290.946, 330.24199999999996, 'e'], [1320.9679999999998, 330.24199999999996, 'w'], [1350.99, 330.24199999999996, 'e'], [1381.012, 330.24199999999996, 'e'], [1411.0339999999999, 330.24199999999996, 'e'], [1441.056, 330.24199999999996, 'e'], [1471.078, 330.24199999999996, 'w']], [[0.0, 360.264, 'w'], [30.022, 360.264, 'w'], [60.044, 360.264, 'w'], [90.066, 360.264, 'w'], [120.088, 360.264, 'w'], [150.10999999999999, 360.264, 'e'], [180.132, 360.264, 'w'], [210.154, 360.264, 'w'], [240.176, 360.264, 'w'], [270.198, 360.264, 'e'], [300.21999999999997, 360.264, 'w'], [330.24199999999996, 360.264, 'w'], [360.264, 360.264, 'w'], [390.286, 360.264, 'e'], [420.308, 360.264, 'w'], [450.33, 360.264, 'e'], [480.352, 360.264, 'e'], [510.37399999999997, 360.264, 'e'], [540.396, 360.264, 'e'], [570.418, 360.264, 'e'], [600.4399999999999, 360.264, 'w'], [630.462, 360.264, 'e'], [660.4839999999999, 360.264, 'e'], [690.506, 360.264, 'e'], [720.528, 360.264, 'e'], [750.55, 360.264, 'w'], [780.572, 360.264, 'e'], [810.5939999999999, 360.264, 'e'], [840.616, 360.264, 'e'], [870.6379999999999, 360.264, 'e'], [900.66, 360.264, 'e'], [930.6819999999999, 360.264, 'w'], [960.704, 360.264, 'w'], [990.726, 360.264, 'e'], [1020.7479999999999, 360.264, 'w'], [1050.77, 360.264, 'e'], [1080.792, 360.264, 'e'], [1110.8139999999999, 360.264, 'e'], [1140.836, 360.264, 'e'], [1170.858, 360.264, 'e'], [1200.8799999999999, 360.264, 'w'], [1230.902, 360.264, 'e'], [1260.924, 360.264, 'w'], [1290.946, 360.264, 'w'], [1320.9679999999998, 360.264, 'w'], [1350.99, 360.264, 'w'], [1381.012, 360.264, 'w'], [1411.0339999999999, 360.264, 'e'], [1441.056, 360.264, 'e'], [1471.078, 360.264, 'w']], [[0.0, 390.286, 'w'], [30.022, 390.286, 'e'], [60.044, 390.286, 'e'], [90.066, 390.286, 'e'], [120.088, 390.286, 'e'], [150.10999999999999, 390.286, 'e'], [180.132, 390.286, 'w'], [210.154, 390.286, 'e'], [240.176, 390.286, 
        'e'], [270.198, 390.286, 'e'], [300.21999999999997, 390.286, 'e'], [330.24199999999996, 390.286, 'e'], [360.264, 390.286, 'e'], [390.286, 390.286, 'e'], [420.308, 390.286, 'w'], [450.33, 390.286, 'w'], [480.352, 390.286, 'w'], [510.37399999999997, 390.286, 'w'], [540.396, 390.286, 'w'], [570.418, 390.286, 'e'], [600.4399999999999, 390.286, 'w'], [630.462, 390.286, 'e'], [660.4839999999999, 390.286, 'w'], [690.506, 390.286, 'w'], [720.528, 390.286, 'w'], [750.55, 390.286, 'w'], [780.572, 390.286, 'w'], [810.5939999999999, 390.286, 'w'], [840.616, 390.286, 'e'], [870.6379999999999, 390.286, 'e'], [900.66, 390.286, 'e'], [930.6819999999999, 390.286, 'w'], [960.704, 390.286, 'e'], [990.726, 390.286, 'e'], [1020.7479999999999, 390.286, 'w'], [1050.77, 390.286, 'w'], [1080.792, 390.286, 'w'], [1110.8139999999999, 390.286, 'w'], [1140.836, 390.286, 'w'], [1170.858, 390.286, 'e'], [1200.8799999999999, 390.286, 'w'], [1230.902, 390.286, 'e'], [1260.924, 390.286, 'e'], [1290.946, 390.286, 'e'], [1320.9679999999998, 390.286, 'w'], [1350.99, 390.286, 'e'], [1381.012, 390.286, 'w'], [1411.0339999999999, 390.286, 'e'], [1441.056, 390.286, 'e'], [1471.078, 390.286, 'w']], [[0.0, 420.308, 'w'], [30.022, 420.308, 'e'], [60.044, 420.308, 'w'], [90.066, 420.308, 'w'], [120.088, 420.308, 'w'], [150.10999999999999, 420.308, 'w'], [180.132, 420.308, 'w'], [210.154, 420.308, 'w'], [240.176, 420.308, 'w'], [270.198, 420.308, 'w'], [300.21999999999997, 420.308, 'w'], [330.24199999999996, 420.308, 'w'], [360.264, 420.308, 'w'], [390.286, 420.308, 'e'], [420.308, 420.308, 'e'], [450.33, 420.308, 'e'], [480.352, 420.308, 'w'], [510.37399999999997, 420.308, 'e'], [540.396, 420.308, 'e'], [570.418, 420.308, 'e'], [600.4399999999999, 420.308, 'w'], [630.462, 420.308, 'e'], [660.4839999999999, 420.308, 'e'], [690.506, 420.308, 'e'], [720.528, 420.308, 'e'], [750.55, 420.308, 'e'], [780.572, 420.308, 'e'], [810.5939999999999, 420.308, 'e'], [840.616, 420.308, 'e'], [870.6379999999999, 420.308, 'w'], [900.66, 420.308, 'e'], [930.6819999999999, 420.308, 'w'], [960.704, 420.308, 'e'], [990.726, 420.308, 'e'], [1020.7479999999999, 420.308, 'w'], [1050.77, 420.308, 'e'], 
        [1080.792, 420.308, 'e'], [1110.8139999999999, 420.308, 'e'], [1140.836, 420.308, 'w'], [1170.858, 420.308, 'e'], [1200.8799999999999, 420.308, 'w'], [1230.902, 420.308, 'e'], [1260.924, 420.308, 'w'], [1290.946, 420.308, 'e'], [1320.9679999999998, 420.308, 'w'], [1350.99, 420.308, 'e'], [1381.012, 420.308, 'w'], [1411.0339999999999, 420.308, 'e'], [1441.056, 
        420.308, 'e'], [1471.078, 420.308, 'w']], [[0.0, 450.33, 'w'], [30.022, 450.33, 'e'], [60.044, 450.33, 'w'], [90.066, 450.33, 'e'], [120.088, 450.33, 'e'], [150.10999999999999, 450.33, 'e'], [180.132, 450.33, 'e'], [210.154, 450.33, 'e'], [240.176, 450.33, 'w'], [270.198, 450.33, 'e'], [300.21999999999997, 450.33, 'e'], [330.24199999999996, 450.33, 'e'], [360.264, 450.33, 'w'], [390.286, 450.33, 'w'], [420.308, 450.33, 'w'], [450.33, 450.33, 'e'], [480.352, 450.33, 'w'], [510.37399999999997, 450.33, 'e'], [540.396, 450.33, 'w'], [570.418, 450.33, 'w'], [600.4399999999999, 450.33, 'w'], [630.462, 450.33, 'w'], [660.4839999999999, 450.33, 'w'], [690.506, 450.33, 'w'], [720.528, 450.33, 'w'], [750.55, 450.33, 'e'], [780.572, 450.33, 'w'], [810.5939999999999, 450.33, 'e'], [840.616, 450.33, 'e'], [870.6379999999999, 450.33, 'w'], [900.66, 450.33, 'e'], [930.6819999999999, 450.33, 'w'], [960.704, 
        450.33, 'e'], [990.726, 450.33, 'w'], [1020.7479999999999, 450.33, 'w'], [1050.77, 450.33, 'e'], [1080.792, 450.33, 'w'], [1110.8139999999999, 450.33, 'e'], [1140.836, 450.33, 'w'], [1170.858, 450.33, 'e'], [1200.8799999999999, 450.33, 'w'], [1230.902, 450.33, 'e'], [1260.924, 450.33, 'w'], [1290.946, 450.33, 'e'], [1320.9679999999998, 450.33, 'w'], [1350.99, 
        450.33, 'e'], [1381.012, 450.33, 'w'], [1411.0339999999999, 450.33, 'w'], [1441.056, 450.33, 'e'], [1471.078, 450.33, 'w']], [[0.0, 480.352, 'w'], [30.022, 480.352, 'e'], [60.044, 480.352, 'e'], [90.066, 480.352, 'e'], [120.088, 480.352, 'w'], [150.10999999999999, 480.352, 'w'], [180.132, 480.352, 'w'], [210.154, 480.352, 'e'], [240.176, 480.352, 'w'], [270.198, 480.352, 'e'], [300.21999999999997, 480.352, 'w'], [330.24199999999996, 480.352, 'e'], [360.264, 480.352, 'w'], [390.286, 480.352, 'e'], [420.308, 480.352, 'w'], [450.33, 480.352, 'e'], [480.352, 480.352, 'w'], [510.37399999999997, 480.352, 'e'], [540.396, 480.352, 'w'], [570.418, 480.352, 'e'], [600.4399999999999, 480.352, 'e'], [630.462, 480.352, 'e'], [660.4839999999999, 480.352, 'e'], [690.506, 480.352, 'e'], [720.528, 480.352, 'e'], [750.55, 480.352, 'e'], [780.572, 480.352, 'w'], [810.5939999999999, 480.352, 'w'], [840.616, 480.352, 'e'], [870.6379999999999, 480.352, 'w'], [900.66, 480.352, 'e'], [930.6819999999999, 480.352, 'w'], [960.704, 480.352, 'e'], [990.726, 480.352, 'w'], [1020.7479999999999, 480.352, 'e'], [1050.77, 480.352, 'e'], [1080.792, 480.352, 'w'], [1110.8139999999999, 480.352, 'e'], [1140.836, 480.352, 'w'], [1170.858, 480.352, 'e'], [1200.8799999999999, 480.352, 'w'], [1230.902, 480.352, 'w'], [1260.924, 480.352, 'w'], [1290.946, 480.352, 'e'], [1320.9679999999998, 480.352, 'w'], [1350.99, 480.352, 'e'], [1381.012, 480.352, 'e'], [1411.0339999999999, 480.352, 'e'], [1441.056, 480.352, 'e'], [1471.078, 480.352, 'w']], [[0.0, 510.37399999999997, 'w'], [30.022, 510.37399999999997, 'e'], [60.044, 510.37399999999997, 'e'], [90.066, 510.37399999999997, 'e'], [120.088, 510.37399999999997, 'w'], [150.10999999999999, 510.37399999999997, 'e'], [180.132, 510.37399999999997, 'w'], [210.154, 510.37399999999997, 'e'], [240.176, 510.37399999999997, 'e'], [270.198, 510.37399999999997, 'e'], [300.21999999999997, 510.37399999999997, 'w'], [330.24199999999996, 510.37399999999997, 'e'], [360.264, 510.37399999999997, 'w'], [390.286, 510.37399999999997, 'e'], [420.308, 510.37399999999997, 'w'], [450.33, 510.37399999999997, 'e'], [480.352, 510.37399999999997, 'w'], [510.37399999999997, 510.37399999999997, 'e'], [540.396, 510.37399999999997, 'e'], [570.418, 510.37399999999997, 'e'], [600.4399999999999, 510.37399999999997, 'e'], [630.462, 510.37399999999997, 'w'], [660.4839999999999, 510.37399999999997, 'w'], [690.506, 510.37399999999997, 'w'], [720.528, 510.37399999999997, 'w'], [750.55, 510.37399999999997, 'e'], [780.572, 510.37399999999997, 'w'], [810.5939999999999, 510.37399999999997, 'e'], [840.616, 510.37399999999997, 'e'], [870.6379999999999, 510.37399999999997, 'w'], [900.66, 510.37399999999997, 'e'], [930.6819999999999, 510.37399999999997, 'e'], [960.704, 510.37399999999997, 'e'], [990.726, 510.37399999999997, 'e'], [1020.7479999999999, 510.37399999999997, 'e'], [1050.77, 510.37399999999997, 'e'], [1080.792, 510.37399999999997, 'w'], [1110.8139999999999, 510.37399999999997, 'e'], [1140.836, 510.37399999999997, 'e'], [1170.858, 510.37399999999997, 'e'], [1200.8799999999999, 510.37399999999997, 'e'], [1230.902, 510.37399999999997, 'e'], [1260.924, 510.37399999999997, 'e'], [1290.946, 510.37399999999997, 'e'], [1320.9679999999998, 510.37399999999997, 'w'], [1350.99, 510.37399999999997, 'e'], [1381.012, 510.37399999999997, 'e'], [1411.0339999999999, 510.37399999999997, 'w'], [1441.056, 510.37399999999997, 'e'], [1471.078, 510.37399999999997, 'w']], [[0.0, 540.396, 'w'], [30.022, 540.396, 'e'], [60.044, 540.396, 'w'], [90.066, 540.396, 'w'], [120.088, 540.396, 'w'], [150.10999999999999, 540.396, 'e'], [180.132, 540.396, 'w'], [210.154, 540.396, 'w'], [240.176, 540.396, 'w'], [270.198, 540.396, 'w'], [300.21999999999997, 540.396, 'w'], [330.24199999999996, 540.396, 'e'], [360.264, 540.396, 'w'], [390.286, 540.396, 'e'], [420.308, 540.396, 'e'], [450.33, 540.396, 'e'], [480.352, 540.396, 'w'], [510.37399999999997, 540.396, 'e'], [540.396, 540.396, 'w'], [570.418, 540.396, 'w'], [600.4399999999999, 540.396, 'w'], [630.462, 540.396, 'w'], [660.4839999999999, 540.396, 'e'], [690.506, 540.396, 'e'], [720.528, 540.396, 'e'], [750.55, 540.396, 'e'], [780.572, 540.396, 'w'], [810.5939999999999, 540.396, 'e'], [840.616, 540.396, 'e'], [870.6379999999999, 540.396, 'w'], [900.66, 540.396, 'w'], [930.6819999999999, 540.396, 'w'], [960.704, 540.396, 'w'], [990.726, 540.396, 'e'], [1020.7479999999999, 540.396, 'w'], [1050.77, 540.396, 'w'], [1080.792, 540.396, 'w'], [1110.8139999999999, 540.396, 'w'], [1140.836, 540.396, 'w'], [1170.858, 540.396, 'w'], [1200.8799999999999, 540.396, 'w'], [1230.902, 540.396, 'w'], [1260.924, 540.396, 'w'], [1290.946, 540.396, 'w'], [1320.9679999999998, 540.396, 'w'], [1350.99, 540.396, 'w'], [1381.012, 540.396, 'w'], [1411.0339999999999, 540.396, 'w'], [1441.056, 540.396, 'e'], [1471.078, 540.396, 'w']], [[0.0, 570.418, 'w'], [30.022, 570.418, 'e'], [60.044, 570.418, 'e'], [90.066, 570.418, 'e'], [120.088, 570.418, 'e'], [150.10999999999999, 570.418, 'e'], [180.132, 570.418, 'e'], [210.154, 570.418, 'e'], [240.176, 570.418, 'e'], [270.198, 570.418, 'e'], [300.21999999999997, 570.418, 'w'], [330.24199999999996, 570.418, 'e'], [360.264, 570.418, 'e'], [390.286, 570.418, 'e'], [420.308, 570.418, 'e'], [450.33, 570.418, 'e'], [480.352, 570.418, 'e'], [510.37399999999997, 570.418, 'e'], [540.396, 570.418, 'w'], [570.418, 570.418, 'e'], [600.4399999999999, 570.418, 'e'], [630.462, 570.418, 'e'], [660.4839999999999, 570.418, 'e'], [690.506, 570.418, 'e'], [720.528, 570.418, 'e'], [750.55, 570.418, 'e'], [780.572, 570.418, 'w'], [810.5939999999999, 570.418, 'e'], [840.616, 570.418, 'e'], [870.6379999999999, 570.418, 'e'], [900.66, 570.418, 'e'], [930.6819999999999, 570.418, 'e'], [960.704, 570.418, 'w'], [990.726, 570.418, 'e'], [1020.7479999999999, 570.418, 'e'], [1050.77, 570.418, 'e'], [1080.792, 570.418, 'e'], [1110.8139999999999, 570.418, 'e'], [1140.836, 570.418, 'e'], [1170.858, 570.418, 'e'], [1200.8799999999999, 570.418, 'w'], [1230.902, 570.418, 'e'], [1260.924, 570.418, 'e'], [1290.946, 570.418, 'e'], [1320.9679999999998, 570.418, 'e'], [1350.99, 570.418, 
        'e'], [1381.012, 570.418, 'e'], [1411.0339999999999, 570.418, 'e'], [1441.056, 570.418, 'f'], [1471.078, 570.418, 'w']], [[0.0, 600.4399999999999, 'w'], [30.022, 600.4399999999999, 
        'w'], [60.044, 600.4399999999999, 'w'], [90.066, 600.4399999999999, 'w'], [120.088, 600.4399999999999, 'w'], [150.10999999999999, 600.4399999999999, 'w'], [180.132, 600.4399999999999, 'w'], [210.154, 600.4399999999999, 'w'], [240.176, 600.4399999999999, 'w'], [270.198, 600.4399999999999, 'w'], [300.21999999999997, 600.4399999999999, 'w'], [330.24199999999996, 
        600.4399999999999, 'w'], [360.264, 600.4399999999999, 'w'], [390.286, 600.4399999999999, 'w'], [420.308, 600.4399999999999, 'w'], [450.33, 600.4399999999999, 'w'], [480.352, 600.4399999999999, 'w'], [510.37399999999997, 600.4399999999999, 'w'], [540.396, 600.4399999999999, 'w'], [570.418, 600.4399999999999, 'w'], [600.4399999999999, 600.4399999999999, 'w'], [630.462, 600.4399999999999, 'w'], [660.4839999999999, 600.4399999999999, 'w'], [690.506, 600.4399999999999, 'w'], [720.528, 600.4399999999999, 'w'], [750.55, 600.4399999999999, 'w'], [780.572, 600.4399999999999, 'w'], [810.5939999999999, 600.4399999999999, 'w'], [840.616, 600.4399999999999, 'w'], [870.6379999999999, 600.4399999999999, 'w'], [900.66, 600.4399999999999, 'w'], [930.6819999999999, 600.4399999999999, 'w'], [960.704, 600.4399999999999, 'w'], [990.726, 600.4399999999999, 'w'], [1020.7479999999999, 600.4399999999999, 'w'], [1050.77, 600.4399999999999, 'w'], [1080.792, 600.4399999999999, 'w'], [1110.8139999999999, 600.4399999999999, 'w'], [1140.836, 600.4399999999999, 'w'], [1170.858, 600.4399999999999, 'w'], [1200.8799999999999, 600.4399999999999, 'w'], [1230.902, 600.4399999999999, 'w'], [1260.924, 600.4399999999999, 'w'], [1290.946, 600.4399999999999, 'w'], [1320.9679999999998, 600.4399999999999, 'w'], [1350.99, 600.4399999999999, 'w'], [1381.012, 600.4399999999999, 'w'], [1411.0339999999999, 600.4399999999999, 'w'], [1441.056, 600.4399999999999, 'w'], [1471.078, 600.4399999999999, 'w']]];

    let lst;

    for (let y = 0; y < gridY; y++) {
        grid[y] = [];
        for (let x = 0; x < gridX; x++) {
            lst = maze[y][x]
            grid[y][x] = {x: lst[0], y: lst[1], state: lst[2]};
        }
    }
}



function parentNode(child, parent, finish) {
    if (finish == true) { 
        var finalPath = [finishNode];
        let prev = finishNode;
        parentChild[child] = parent;

        while (arrayEquals(prev, startNode) == false) {
            prev = parentChild[prev];
            finalPath.unshift(prev);
        }

        parentChild = {};

        return finalPath;

    } else {
        parentChild[child] = parent;
    }

}



function depthFirstSearch() {
    canvas.onmousedown = null;
    disableButton = true;
    running = true;
    init(30);

    let stk = [startNode];
    let max_Y = grid.length - 1;
    let max_X = grid[0].length - 1;
    let y, x;
    let y_path, x_path;
    let dir;
    let next;

    let visitedS = true;
    ctx.fillStyle = '#00CEF6';
    ctx.fillRect(grid[startNode[0]][startNode[1]].x, grid[startNode[0]][startNode[1]].y, rectX, rectY);
    ctx.drawImage(startImg, grid[startNode[0]][startNode[1]].x, grid[startNode[0]][startNode[1]].y, rectX, rectY);

    let loop = setInterval(() => {
        next = stk.pop();
        y = next[0];
        x = next[1];

        if (grid[y][x].state == 'e') {
            grid[y][x].state = 'v';

        } else if (grid[y][x].state == 'f') {
            running = false;
            visitedF = true;
            let path = parentNode(null, null, true);

            grid[startNode[0]][startNode[1]].state = 'xStart';

            for (let i = 1; i < path.length; i++) {
                setTimeout(function () {
                    y_path = path[i][0];
                    x_path = path[i][1];

                    if (y_path == finishNode[0] && x_path == finishNode[1]) {
                        grid[y_path][x_path].state = 'xFinish';

                    } else {
                        grid[y_path][x_path].state = 'x';
                    }
                }, i * 30);
            }

            removeUnrenderedVisitedNodes();
            clearInterval(loop);
        }

        dir = [[y, x - 1], [y - 1, x], [y, x + 1], [y + 1, x]];

        for (let i = 0; i < 4; i++) {
            dir_Y = dir[i][0];
            dir_X = dir[i][1];

            if (0 <= dir_Y && dir_Y <= max_Y && 0 <= dir_X && dir_X <= max_X) {

                if (grid[dir_Y][dir_X].state == 'e' || grid[dir_Y][dir_X].state == 'f') {
                    stk.push([dir_Y, dir_X]);
                    parentNode([dir_Y, dir_X], [y, x], false);
                }
            }
        }
    }, 65);
}



function removeUnrenderedVisitedNodes() {
    // To remove bug where the program finishes while the color transition loop is still running
    // Which caused the unfinished rendered node who's state is still 'v' to turn yellow
    for (let y = 0; y < gridY; y++) {

        for (let x = 0; x < gridX; x++) {

            if (grid[y][x].state == 'v') {
                grid[y][x].state = 'tran';
            }
        }
    }
}



function breadthFirstSearch() {
    canvas.onmousedown = null;
    disableButton = true;
    running = true;
    incr = 2;
    init(30);

    let queue = [startNode];
    let max_Y = grid.length - 1;
    let max_X = grid[0].length - 1;
    let y, x;
    let path;
    let y_path, x_path;
    let dir;
    let next;

    let visitedS = true;
    ctx.fillStyle = '#00CEF6';
    ctx.fillRect(grid[startNode[0]][startNode[1]].x, grid[startNode[0]][startNode[1]].y, rectX, rectY);
    ctx.drawImage(startImg, grid[startNode[0]][startNode[1]].x, grid[startNode[0]][startNode[1]].y, rectX, rectY);
    
    let loop = setInterval(() => {
        next = queue.shift();
        y = next[0];
        x = next[1];

        dir = [[y - 1, x], [y, x + 1], [y + 1, x], [y, x - 1]];

        if (inArray(finishNode, dir)) {
            running = false;
            visitedF = true;
            path = parentNode(finishNode, [y, x], true);

            grid[startNode[0]][startNode[1]].state = 'xStart';
            
            for (let i = 1; i < path.length; i++) {
                setTimeout(function () {
                    y_path = path[i][0];
                    x_path = path[i][1];
                    
                    if (y_path == finishNode[0] && x_path == finishNode[1]) {
                        grid[y_path][x_path].state = 'xFinish';

                    } else {
                        grid[y_path][x_path].state = 'x';
                    }
                }, i * 30);
            }

            removeUnrenderedVisitedNodes();
            clearInterval(loop);

        } else { 

                for (let i = 0; i < 4; i++) {
                dir_Y = dir[i][0];
                dir_X = dir[i][1];

                if (0 <= dir_Y && dir_Y <= max_Y && 0 <= dir_X && dir_X <= max_X) {

                    if (grid[dir_Y][dir_X].state == 'e') {
                        queue.push([dir_Y, dir_X]);
                        grid[dir_Y][dir_X].state = 'v';
                        parentNode([dir_Y, dir_X], [y, x], false)
                    }
                }
            }
        }
    }, 10);
}



let GColor = function(r,g,b) {
    r = (typeof r === 'undefined')?0:r;
    g = (typeof g === 'undefined')?0:g;
    b = (typeof b === 'undefined')?0:b;
    return {r:r, g:g, b:b};
}

let createColorRange = function(c1, c2) {
    var colorList = [], tmpColor;

    for (var i=0; i<247; i+=4) {
        tmpColor = new GColor();
        tmpColor.r = c1.r + ((i*(c2.r-c1.r))/247);
        tmpColor.g = c1.g + ((i*(c2.g-c1.g))/247);
        tmpColor.b = c1.b + ((i*(c2.b-c1.b))/247);
        colorList.push('rgb('+tmpColor.r+', '+tmpColor.g+', '+tmpColor.b+')');
    }

    return colorList;
}

let range = createColorRange(GColor(64 , 224, 208), GColor(0, 206, 246));


function rect(x, y, w, h, state) {
    noNeedFillRect = false;

    if (state == 's') {
        if (visitedS == true) {
            ctx.fillStyle = '#00CEF6';
            ctx.fillRect(x, y, w, h);
        }
        ctx.drawImage(startImg, x, y, w, h);
        noNeedFillRect = true;

    } else if (state == 'f') {
        if (visitedF == true) {
            ctx.fillStyle = '#00CEF6';
            ctx.fillRect(x, y, w, h);
        }
        ctx.drawImage(finishImg, x - 1.5, y, 33, 33);
        noNeedFillRect = true;

    } else if (state == 'e') {
        ctx.lineWidth = 0.7;
        ctx.strokeStyle = '#e7ebed';
    
    } else if (state == 'w') {
        ctx.fillStyle = '#23395d';

    } else if (state == 'x') {
        ctx.fillStyle = '#FFFF00';

    } else if (state == 'tran') {   // Tran for transitioned color effect
        ctx.fillStyle = '#00CEF6';

    } else if (state == 'moveStart') {
        ctx.drawImage(clickedStartImg, x + 7, y, 18, 28.5);
        noNeedFillRect = true;

    } else if (state == 'moveFinish') {
        ctx.drawImage(clickedFinishImg, x - 1.5, y, 33, 33);
        noNeedFillRect = true;

    } else if (state == 'xStart') {
        ctx.fillStyle = '#FFFF00';
        let y = startNode[0];
        let x = startNode[1];
        ctx.fillRect(grid[y][x].x, grid[y][x].y, w, h);
        ctx.drawImage(startImg, grid[y][x].x, grid[y][x].y, w, h);
        noNeedFillRect = true;

    } else if (state == 'xFinish') {
        ctx.fillStyle = '#FFFF00';
        let y = finishNode[0];
        let x = finishNode[1];
        ctx.fillRect(grid[y][x].x, grid[y][x].y, w, h);
        ctx.drawImage(finishImg, grid[y][x].x, grid[y][x].y, w, h);
        noNeedFillRect = true;
    }
    
    
    if (state == 'e') {
        ctx.strokeRect(x, y, w, h);

    } else if (noNeedFillRect == false) {
        ctx.fillRect(x, y, w, h);
    }
}



function clear() {
    ctx.clearRect(0, 0, width, height);     
}



function draw() {
    if (running == false) {
        clear();    // Resets grid to draw again

        for (let y = 0; y < gridY; y++) {

            for (let x = 0; x < gridX; x++) {
                rect(grid[y][x].x, grid[y][x].y, rectX, rectY, grid[y][x].state);
            }
        }

    } else {

        for (let y = 0; y < gridY; y++) {

            for (let x = 0; x < gridX; x++) {

                if (grid[y][x].state == 'v') {

                    let i = 0;
                    let individual = setInterval(function() {

                        if (i == range.length - 2) {
                            clearInterval(individual);
                        }
                        ctx.fillStyle = range[i];
                        ctx.fillRect(grid[y][x].x, grid[y][x].y, rectX, rectY);
                        ctx.lineWidth = 0.08;
                        ctx.strokeRect(grid[y][x].x, grid[y][x].y, rectX, rectY);
                        
                        i+= incr;
                    }, 25); 

                    grid[y][x].state = 'tran';
                }
            }
        }
    }
}



function reset() {
    return location.reload();
}



function init(speed) {
    canvas = document.getElementById('Canvas');
    ctx = canvas.getContext('2d');
    return setInterval(draw, speed);   // Sets timer to run function over and over again
}



function hold(e) {
    let x_cord = e.pageX - canvas.offsetLeft;    // Adjust the coordinates so that top left of grid is 0,0
    let y_cord = e.pageY - canvas.offsetTop;     // No matter where the canvas is sitting on the page

    if (!dropFinishNode && !dropStartNode) {

        for (let y = 0; y < gridY; y++) {

            for (let x = 0; x < gridX; x++) {

                if ((x * (rectX + 0.022)) < x_cord && x_cord < (x * (rectX + 0.022) + rectX) && (y * (rectY + 0.022)) < y_cord && y_cord < (y * (rectY + 0.022) + rectY)) {

                    if (grid[y][x].state == 'e' && (x != boundX || y != boundY)) {
                        grow((x * (rectX + 0.022)), (y * (rectY + 0.022)), y, x);
                        boundX = x;
                        boundY = y;
        
                    } else if (grid[y][x].state == 'w' && (x != boundX || y != boundY)) {
                        grid[y][x].state = 'e';
                        boundX = x;
                        boundY = y;
                    }       
                }
            }
        }
    }
}


function grow(x, y, indexY, indexX) {
    ctx.fillStyle = '#23395d';
    let xGrowAnimation = x + 15;
    let yGrowAnimation = y + 15;
    let i = 0;

    let grow = setInterval(function() {
        ctx.fillRect(xGrowAnimation - i, yGrowAnimation - i, i * 2, i * 2);

        if (i == 15) {
            clearInterval(grow);
            grid[indexY][indexX].state = 'w';
        }

        i+=3.75;
        }, 15);
}



function down(e) {
    canvas.onmousemove = hold;

    let x_cord = e.pageX - canvas.offsetLeft;    // Adjust the coordinates so that top left of grid is 0,0
    let y_cord = e.pageY - canvas.offsetTop;     // No matter where the canvas is sitting on the page

    for (let y = 0; y < gridY; y++) {

        for (let x = 0; x < gridX; x++) {

            if ((x * (rectX + 0.022)) < x_cord && x_cord < (x * (rectX + 0.022) + rectX) && (y * (rectY + 0.022)) < y_cord && y_cord < (y * (rectY + 0.022) + rectY)) {

                if (!dropStartNode && !dropFinishNode) {

                    if (grid[y][x].state == 'e') {
                        grow((x * (rectX + 0.022)), (y * (rectY + 0.022)), y, x);
                        boundX = x;
                        boundY = y;
    
                    } else if (grid[y][x].state == 'w') {
                        grid[y][x].state = 'e';
                        boundX = x;
                        boundY = y;
    
                    } else if (grid[y][x].state == 's') {
                        grid[y][x].state = 'moveStart';
                        dropStartNode = true;

                    } else if (grid[y][x].state == 'f') {
                        grid[y][x].state = 'moveFinish';
                        dropFinishNode = true;
                    }

                } else {

                    if (grid[y][x].state == 'e') {

                        if (dropStartNode) {
                            grid[startNode[0]][startNode[1]].state = 'e';
                            startNode = [y, x];
                            grid[y][x].state = 's';
                            dropStartNode = false;

                        } else if (dropFinishNode) {
                            grid[finishNode[0]][finishNode[1]].state = 'e';
                            finishNode = [y, x];
                            grid[y][x].state = 'f';
                            dropFinishNode = false;
                        } 

                    } else {

                        if (dropStartNode) {
                            grid[startNode[0]][startNode[1]].state = 's';
                            dropStartNode = false;

                        } else if (dropFinishNode) {
                            grid[finishNode[0]][finishNode[1]].state = 'f';
                            dropFinishNode = false;
                        }
                    }
                }
            }
        }
    }
}



function up(e) {
    canvas.onmousemove = null;
}



init(100);
canvas.onmousedown = down;
canvas.onmouseup = up;